from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone
from django.utils.html import format_html
import uuid

class Company(models.Model):
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    logo = models.ImageField(upload_to='company_logos/', blank=True, null=True, verbose_name="–õ–æ–≥–æ—Ç–∏–ø")
    website = models.URLField(blank=True, verbose_name="–í–µ–±-—Å–∞–π—Ç")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    
    class Meta:
        verbose_name = "–ö–æ–º–ø–∞–Ω–∏—è"
        verbose_name_plural = "–ö–æ–º–ø–∞–Ω–∏–∏"
        ordering = ['name']
    
    def __str__(self):
        return self.name
    
    @property
    def logo_preview(self):
        if self.logo:
            return format_html('<img src="{}" width="50" height="50" style="border-radius: 5px;" />', self.logo.url)
        return "No Logo"

class Contact(models.Model):
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='contacts', verbose_name="–ö–æ–º–ø–∞–Ω–∏—è")
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    first_name = models.CharField(max_length=100, verbose_name="–ò–º—è")
    last_name = models.CharField(max_length=100, verbose_name="–§–∞–º–∏–ª–∏—è")
    email = models.EmailField(verbose_name="Email")
    phone = models.CharField(max_length=20, blank=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    is_primary = models.BooleanField(default=False, verbose_name="–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç")
    telegram_chat_id = models.CharField(max_length=50, blank=True, verbose_name="Telegram Chat ID")
    
    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–∞–∫—Ç"
        verbose_name_plural = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
        constraints = [
            models.UniqueConstraint(
                fields=['company', 'is_primary'],
                condition=models.Q(is_primary=True),
                name='unique_primary_contact'
            )
        ]
        ordering = ['company', 'is_primary', 'last_name']
    
    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Object(models.Model):
    OBJECT_TYPES = [
        ('warehouse', 'üè≠ –°–∫–ª–∞–¥'),
        ('industrial', 'üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π'),
        ('office', 'üè¢ –û—Ñ–∏—Å'),
        ('retail', 'üõçÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π'),
    ]
    
    STATUS_CHOICES = [
        ('active', '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π'),
        ('inactive', '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'),
        ('exclusive', '‚ù§Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤'),
        ('secret', '‚≠ê –°–µ–∫—Ä–µ—Ç–Ω–æ'),
        ('draft', 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('sold', 'üí∞ –ü—Ä–æ–¥–∞–Ω'),
        ('leased', 'üìÑ –°–¥–∞–Ω –≤ –∞—Ä–µ–Ω–¥—É'),
    ]
    
    REGION_CHOICES = [
        ('–ú–æ—Å–∫–≤–∞', '–ú–æ—Å–∫–≤–∞'),
        ('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'),
        ('–ö–∞–∑–∞–Ω—å', '–ö–∞–∑–∞–Ω—å'),
        ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'),
        ('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'),
        ('–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'),
        ('–°–∞–º–∞—Ä–∞', '–°–∞–º–∞—Ä–∞'),
        ('–ü–µ—Ä–º—å', '–ü–µ—Ä–º—å'),
        ('–£—Ñ–∞', '–£—Ñ–∞'),
        ('–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'),
        ('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'),
        ('–¢—é–º–µ–Ω—å', '–¢—é–º–µ–Ω—å'),
        ('–•–∞–±–∞—Ä–æ–≤—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫'),
        ('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'),
    ]
    
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    object_type = models.CharField(max_length=20, choices=OBJECT_TYPES, verbose_name="–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='active', verbose_name="–°—Ç–∞—Ç—É—Å")
    address = models.CharField(max_length=200, verbose_name="–ê–¥—Ä–µ—Å")
    city = models.CharField(max_length=100, choices=REGION_CHOICES, default='–ú–æ—Å–∫–≤–∞', verbose_name="–ì–æ—Ä–æ–¥")
    
    # Location fields
    latitude = models.DecimalField(
        max_digits=9, 
        decimal_places=6, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(-90), MaxValueValidator(90)],
        verbose_name="–®–∏—Ä–æ—Ç–∞"
    )
    longitude = models.DecimalField(
        max_digits=9, 
        decimal_places=6, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(-180), MaxValueValidator(180)],
        verbose_name="–î–æ–ª–≥–æ—Ç–∞"
    )
    
    owner = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='owned_objects', verbose_name="–í–ª–∞–¥–µ–ª–µ—Ü")
    total_area = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å")
    floors = models.IntegerField(validators=[MinValueValidator(1)], default=1, verbose_name="–≠—Ç–∞–∂–∏")
    build_year = models.IntegerField(null=True, blank=True, verbose_name="–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # Default vacancy type for this object
    default_vacancy_type = models.CharField(
        max_length=20, 
        choices=[
            ('entire_object', 'üè¢ –í–µ—Å—å –æ–±—ä–µ–∫—Ç'),
            ('unit', 'üì¶ –ü–æ–º–µ—â–µ–Ω–∏–µ'),
            ('floor', 'üè¢ –≠—Ç–∞–∂'),
        ],
        default='unit',
        verbose_name="–¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    
    class Meta:
        verbose_name = "–û–±—ä–µ–∫—Ç"
        verbose_name_plural = "–û–±—ä–µ–∫—Ç—ã"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.get_object_type_display()} - {self.name}"
    
    @property
    def active_offers_count(self):
        return self.offers.filter(is_available=True).count()
    
    @property
    def coordinates(self):
        if self.latitude and self.longitude:
            return f"{self.latitude}, {self.longitude}"
        return "Not set"

class Offer(models.Model):
    VACANCY_TYPES = [
        ('entire_object', 'üè¢ –í–µ—Å—å –æ–±—ä–µ–∫—Ç'),
        ('unit', 'üì¶ –ü–æ–º–µ—â–µ–Ω–∏–µ'),
        ('floor', 'üè¢ –≠—Ç–∞–∂'),
    ]
    
    OFFER_TYPES = [
        ('sale', 'üí∞ –ü—Ä–æ–¥–∞–∂–∞'),
        ('lease', 'üìÑ –ê—Ä–µ–Ω–¥–∞'),
        ('both', 'üíº –ü—Ä–æ–¥–∞–∂–∞ –∏ –ê—Ä–µ–Ω–¥–∞'),
    ]

    CG_TYPES = [
        ('12x24', '12x24'),
        ('12x18', '12x18'),
        ('18x24', '18x24'),
        ('9x9', '9x9'),
        ('6x6', '6x6'),
        ('6x9', '6x9'),
        ('9x18', '9x18'),
        ('9x12', '9x12'),
        ('another', '–¥—Ä—É–≥–æ–π'),
    ]
    
    object = models.ForeignKey(Object, on_delete=models.CASCADE, related_name='offers', verbose_name="–û–±—ä–µ–∫—Ç")
    parent_offer = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='child_offers', verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    vacancy_type = models.CharField(max_length=20, choices=VACANCY_TYPES, default='unit', verbose_name="–¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    offer_type = models.CharField(max_length=10, choices=OFFER_TYPES, default='lease', verbose_name="–¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    # Availability
    available_from = models.DateField(default=timezone.now, verbose_name="–î–æ—Å—Ç—É–ø–Ω–æ —Å")
    is_available = models.BooleanField(default=True, verbose_name="–î–æ—Å—Ç—É–ø–Ω–æ")
    owner_company = models.ForeignKey(Company, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫")
    contact_person = models.ForeignKey(Contact, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ")
    
    # Area specifications
    whs_area = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°–∫–ª–∞–¥—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å")
    mez_area = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–ú–µ–∑–æ–Ω–∏–Ω –ø–ª–æ—â–∞–¥—å")
    office_area = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–û—Ñ–∏—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
    tech_area = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å")
    
    # Lease prices
    whs_lease_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –°–∫–ª–∞–¥, —Ä—É–±/–º¬≤/–≥–æ–¥")
    mez_lease_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –ú–µ–∑–æ–Ω–∏–Ω, —Ä—É–±/–º¬≤/–≥–æ–¥")
    office_lease_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –û—Ñ–∏—Å, —Ä—É–±/–º¬≤/–≥–æ–¥")
    tech_lease_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –¢–µ—Ö, —Ä—É–±/–º¬≤/–≥–æ–¥")
    
    # Sale price
    sale_price = models.DecimalField(max_digits=15, decimal_places=2, default=0, verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, —Ä—É–±")
   

    # Technical specifications (not required)
    height = models.DecimalField(max_digits=4, decimal_places=2, default=12, blank=True, verbose_name="–í—ã—Å–æ—Ç–∞, –º")
    column_grid = models.CharField(max_length=7, choices=CG_TYPES, default='12x24', blank=True, verbose_name="–®–∞–≥ –∫–æ–ª–æ–Ω–Ω, –º")
    floor_load = models.DecimalField(max_digits=3, decimal_places=1, default=6, blank=True, verbose_name="–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–æ–ª, —Ç/–º¬≤")
    docks_amount = models.IntegerField(default=0, blank=True, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫–æ–≤")
    ramp = models.BooleanField(default=False, blank=True, verbose_name="–ï—Å—Ç—å —Ä–∞–º–ø–∞")
    racks = models.BooleanField(default=False, blank=True, verbose_name="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–µ–ª–ª–∞–∂–∏")
    multitemp = models.BooleanField(default=False, blank=True, verbose_name="–ú—É–ª—å—Ç–∏—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å–∫–ª–∞–¥")
    
    title = models.CharField(max_length=50, blank=True, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    class Meta:
        verbose_name = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        verbose_name_plural = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.total_area}"
    
    @property
    def total_area(self):
        return self.whs_area + self.mez_area + self.office_area + self.tech_area
    
    @property
    def price_display(self):
        if self.offer_type == 'sale' and self.sale_price:
            return f"${self.sale_price:,.2f}"
        elif self.offer_type == 'lease' and self.lease_price_per_sqm:
            return f"${self.lease_price_per_sqm}/m¬≤"
        elif self.offer_type == 'both':
            prices = []
            if self.sale_price:
                prices.append(f"Sale: ${self.sale_price:,.2f}")
            if self.lease_price_per_sqm:
                prices.append(f"Lease: ${self.lease_price_per_sqm}/m¬≤")
            return " | ".join(prices)
        return "Price not set"

class ObjectImage(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name="ID")
    object = models.ForeignKey(Object, on_delete=models.CASCADE, related_name='images', verbose_name="–û–±—ä–µ–∫—Ç")
    image = models.ImageField(upload_to='object_images/', verbose_name="–§–æ—Ç–æ")
    caption = models.CharField(max_length=200, blank=True, verbose_name="–ü–æ–¥–ø–∏—Å—å")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫")
    uploaded_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    class Meta:
        verbose_name = "–§–æ—Ç–æ"
        verbose_name_plural = "–§–æ—Ç–æ"
        ordering = ['order', 'uploaded_at']
    
    def image_preview(self):
        if self.image:
            return format_html(
                '<img src="{}" width="100" height="75" style="object-fit: cover; border-radius: 4px;" />', 
                self.image.url
            )
        return "No Image"
    
    def __str__(self):
        return f"Image for {self.object.name}"

class Agent(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    company = models.ForeignKey(Company, on_delete=models.CASCADE, verbose_name="–ö–æ–º–ø–∞–Ω–∏—è")
    telegram_id = models.CharField(max_length=50, blank=True, verbose_name="Telegram ID")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω—ã–π")
    
    class Meta:
        verbose_name = "–ê–≥–µ–Ω—Ç"
        verbose_name_plural = "–ê–≥–µ–Ω—Ç—ã"
    
    def __str__(self):
        return self.user.get_full_name() or self.user.username